--- origsrc/openzl-0.1.0/CMakeLists.txt	2025-10-06 12:47:11.000000000 +0900
+++ src/openzl-0.1.0/CMakeLists.txt	2025-10-09 10:46:40.752568600 +0900
@@ -156,7 +156,7 @@ list(APPEND openzl_files
     ${headers}
 )
 
-add_library(openzl
+add_library(openzl SHARED
     ${openzl_files}
     "${CONFIG}")
 
@@ -176,6 +176,7 @@ source_group(
     FILES "${CONFIG}")
 
 # TODO: pkgconfig
+find_package(pkgconfig REQUIRED)
 
 target_include_directories(openzl_deps
     BEFORE
@@ -202,22 +203,28 @@ target_include_directories(openzl
 )
 
 set_property(TARGET openzl PROPERTY VERSION ${PACKAGE_VERSION})
+if (DEFINED SOVERSION)
+    set_target_properties(openzl PROPERTIES SOVERSION ${SOVERSION})
+endif()
 apply_openzl_compile_options_to_target(openzl)
 
 target_link_libraries(openzl PUBLIC openzl_deps)
 
 # order matters. dependencies first
 if (OPENZL_BUILD_TESTS)
-    set(INSTALL_GTEST OFF)
-    FetchContent_Declare(
-        googletest # v1.14.0
-        URL https://github.com/google/googletest/archive/refs/tags/v1.14.0.zip
-        URL_HASH SHA256=1f357c27ca988c3f7c6b4bf68a9395005ac6761f034046e9dde0896e3aba00e4
-        OVERRIDE_FIND_PACKAGE
-    )
-    FetchContent_MakeAvailable(googletest)
-    find_package(googletest REQUIRED)
-    include(GoogleTest)
+    find_package(gtest)
+    if (NOT GTEST_FOUND)
+        set(INSTALL_GTEST OFF)
+        FetchContent_Declare(
+            googletest # v1.14.0
+            URL https://github.com/google/googletest/archive/refs/tags/v1.14.0.zip
+            URL_HASH SHA256=1f357c27ca988c3f7c6b4bf68a9395005ac6761f034046e9dde0896e3aba00e4
+            OVERRIDE_FIND_PACKAGE
+        )
+        FetchContent_MakeAvailable(googletest)
+        find_package(googletest REQUIRED)
+        include(GoogleTest)
+    endif()
     enable_testing()
 
     include(CTest)
@@ -273,7 +280,8 @@ if (OPENZL_INSTALL)
     install(
         DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/openzl
         DESTINATION ${OPENZL_INSTALL_INCLUDEDIR}
-        COMPONENT dev)
+        COMPONENT dev
+        PATTERN "*.md" EXCLUDE)
     # Install C++ public headers
     if (OPENZL_CPP_INSTALL)
         install(
--- origsrc/openzl-0.1.0/benchmark/CMakeLists.txt	2025-10-06 12:47:11.000000000 +0900
+++ src/openzl-0.1.0/benchmark/CMakeLists.txt	2025-10-09 09:27:33.669909400 +0900
@@ -1,6 +1,14 @@
 # Copyright (c) Meta Platforms, Inc. and affiliates.
 
+pkg_check_modules(BENCHMARK benchmark)
+pkg_check_modules(FMT fmt)
 # The binary comes with an SAO corpus internally that isn't provided here
+if (BENCHMARK_FOUND)
+    add_library(benchmark::benchmark INTERFACE IMPORTED)
+    target_link_libraries(benchmark::benchmark INTERFACE ${BENCHMARK_LIBRARIES})
+    target_include_directories(benchmark::benchmark INTERFACE ${BENCHMARK_INCLUDE_DIRS})
+    target_compile_options(benchmark::benchmark INTERFACE ${BENCHMARK_CFLAGS_OTHER})
+else()
 set(BENCHMARK_ENABLE_GTEST_TESTS OFF)
 FetchContent_Declare(
     googlebenchmark # v1.6.1
@@ -8,15 +16,25 @@ FetchContent_Declare(
     URL_HASH SHA256=367e963b8620080aff8c831e24751852cffd1f74ea40f25d9cc1b667a9dd5e45
     OVERRIDE_FIND_PACKAGE
 )
+FetchContent_MakeAvailable(googlebenchmark)
+find_package(googlebenchmark REQUIRED)
+endif()
+
+if (FMT_FOUND)
+    add_library(fmt::fmt INTERFACE IMPORTED)
+    target_link_libraries(fmt::fmt INTERFACE ${FMT_LIBRARIES})
+    target_include_directories(fmt::fmt INTERFACE ${FMT_INCLUDE_DIRS})
+    target_compile_options(fmt::fmt INTERFACE ${FMT_CFLAGS_OTHER})
+else()
 FetchContent_Declare(
     fmt # v9.1.0
     URL https://github.com/fmtlib/fmt/releases/download/9.1.0/fmt-9.1.0.zip
     URL_HASH SHA256=cceb4cb9366e18a5742128cb3524ce5f50e88b476f1e54737a47ffdf4df4c996
     OVERRIDE_FIND_PACKAGE
 )
-FetchContent_MakeAvailable(googlebenchmark fmt)
-find_package(googlebenchmark REQUIRED)
+FetchContent_MakeAvailable(fmt)
 find_package(fmt REQUIRED)
+endif()
 
 file(
     GLOB_RECURSE openzl_benchmark_sources
--- origsrc/openzl-0.1.0/build/cmake/openzl-deps.cmake	2025-10-06 12:47:11.000000000 +0900
+++ src/openzl-0.1.0/build/cmake/openzl-deps.cmake	2025-10-09 00:55:57.353218500 +0900
@@ -16,6 +16,15 @@ if (OPENZL_SANITIZE_MEMORY)
     endif()
 endif()
 
+find_package(pkgconfig REQUIRED)
+pkg_check_modules(ZSTD libzstd)
+
+if (ZSTD_FOUND)
+    message(STATUS "Using system-installed zstd")
+    set(ZSTD_AVAILABLE TRUE)
+    list(APPEND OPENZL_LINK_LIBRARIES ${ZSTD_LIBRARIES})
+else()
+
 set(ZSTD_LEGACY_SUPPORT OFF)
 
 # Two-tier zstd dependency resolution with automated hash verification
@@ -77,6 +86,7 @@ if(NOT ZSTD_AVAILABLE)
     FetchContent_MakeAvailable(zstd_tarball)
     check_zstd_available(ZSTD_AVAILABLE)
 endif()
+endif()
 
 # Final check
 if(NOT ZSTD_AVAILABLE)
@@ -90,10 +100,12 @@ set(ZSTD_BUILD_PROGRAMS OFF CACHE BOOL "
 set(ZSTD_BUILD_CONTRIB OFF CACHE BOOL "")
 set(ZSTD_BUILD_TESTS OFF CACHE BOOL "")
 
-# Add zstd subdirectory directly instead of using FetchContent
-add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/deps/zstd/build/cmake" zstd_build)
-# Note: find_package not needed when using add_subdirectory - targets are directly available
-list(APPEND OPENZL_LINK_LIBRARIES libzstd)
+if (NOT ZSTD_FOUND)
+    # Add zstd subdirectory directly instead of using FetchContent
+    add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/deps/zstd/build/cmake" zstd_build)
+    # Note: find_package not needed when using add_subdirectory - targets are directly available
+    list(APPEND OPENZL_LINK_LIBRARIES libzstd)
+endif()
 
 find_library(MATH_LIBRARY m)
 if(MATH_LIBRARY)
--- origsrc/openzl-0.1.0/cli/args/CMakeLists.txt	2025-10-06 12:47:11.000000000 +0900
+++ src/openzl-0.1.0/cli/args/CMakeLists.txt	2025-10-09 04:55:42.837482000 +0900
@@ -17,6 +17,7 @@ target_include_directories(args
 
 target_link_libraries(args
     PUBLIC
+    utils
     openzl_cpp
     custom_parsers
     tools_io
@@ -24,6 +25,7 @@ target_link_libraries(args
 
 
 add_dependencies(args
+    utils
     openzl_cpp
     custom_parsers
     tools_io
--- origsrc/openzl-0.1.0/cpp/CMakeLists.txt	2025-10-06 12:47:11.000000000 +0900
+++ src/openzl-0.1.0/cpp/CMakeLists.txt	2025-10-09 10:20:10.275996800 +0900
@@ -6,7 +6,7 @@ file(GLOB_RECURSE cpp_private_headers CO
 file(GLOB_RECURSE cpp_public_headers CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/cpp/include/*.hpp")
 
 add_library(
-    openzl_cpp
+    openzl_cpp SHARED
     ${cpp_sources}
 )
 
@@ -14,6 +14,10 @@ add_library(
 # Later we could build both PIC & non-PIC versions of the library.
 set_property(TARGET openzl_cpp PROPERTY POSITION_INDEPENDENT_CODE ON)
 
+if (DEFINED SOVERSION)
+    set_target_properties(openzl_cpp PROPERTIES SOVERSION ${SOVERSION})
+endif()
+
 apply_openzl_compile_options_to_target(openzl_cpp)
 
 source_group(
--- origsrc/openzl-0.1.0/custom_parsers/csv/CMakeLists.txt	2025-10-06 12:47:11.000000000 +0900
+++ src/openzl-0.1.0/custom_parsers/csv/CMakeLists.txt	2025-10-09 04:47:34.468818200 +0900
@@ -17,6 +17,7 @@ target_include_directories(csv_parser PR
     ${PROJECT_SOURCE_DIR})
 target_link_libraries(csv_parser
     openzl
+    shared_components
 )
 
 add_dependencies(csv_parser openzl)
--- origsrc/openzl-0.1.0/src/openzl/shared/portability.h	2025-10-06 12:47:11.000000000 +0900
+++ src/openzl-0.1.0/src/openzl/shared/portability.h	2025-10-09 01:12:22.475877700 +0900
@@ -214,7 +214,7 @@ ZL_BEGIN_C_DECLS
 #if (defined(__STDC_IEC_559__) && __STDC_IEC_559__) \
         || (defined(__STDC_IEC_60559_BFP__)         \
             && __STDC_IEC_60559_BFP__ >= 202311L)   \
-        || defined(__APPLE__) || defined(__MINGW32__)
+        || defined(__APPLE__) || defined(__MINGW32__) || defined(__CYGWIN__)
 #    define ZL_HAS_IEEE_754 1
 #else
 #    define ZL_HAS_IEEE_754 0
